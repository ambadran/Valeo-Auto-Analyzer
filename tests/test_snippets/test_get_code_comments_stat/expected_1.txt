[CodeComment(comment='/*****************************************************************************/\n/*!\n * \\fn      FUNC(Std_ReturnType, RTE_CODE) F1B8_VW_system_firmware_versions_ReadDataLength\n *                                                                  (P2VAR(uint16, AUTOMATIC, RTE_APPL_DATA) DidLength)\n * \\brief   This function set the F1B8 DID length.\n * \\param   [in] DidLength: Variable what will be store the DID length.\n * \\param   [out] DidLength: Variable what will be store the DID length.\n * \\param   [out] retStatus: The status of the function\'s execution\n * \\return  Success of operation.\n * \\retval  E_OK - This value is always returned as defined in the AUTOSAR requirements.\n */\n/*****************************************************************************/\n/*! \\misra PRQA 3432 "Macro expansion does not result in expression\nand according to the Coding Guideline rule 4.6 AUTOSAR Compiler Abstraction should be used" */\n/*! \\misra PRQA 3206 "The function prototype is generated by Tresos, which includes also not used arguments." */', start_line_num=1028, end_line_num=1042, type_='', function='', func_type=False), CodeComment(comment='/*****************************************************************************/\n/*!\n * \\fn      FUNC(Std_ReturnType, RTE_CODE) Idp_F1B8_VW_system_firmware_versions_ReadData\n *                           (P2VAR(Dcm_DataF1B8_VW_system_firmware_versions_ArrayType, AUTOMATIC, RTE_APPL_DATA) Data)\n * \\brief   This function handles the F1B8 DID readability via UDS.\n *          [HIS] STVOC2 \'Language scope \'VOCF\' per function\' is exceeded\n *          It is necessary to maintain a reasonable SW design, ensure the good behavior and optimal performace.\n * \\param   [in] Data: Variable what will be store the needed DID value\n * \\param   [out] Data: Variable what will be store the needed DID value\n * \\param   [out] retStatus: The status of the function\'s execution\n * \\return  Success of operation.\n * \\retval  E_OK - This value is always returned as defined in the AUTOSAR requirements.\n */\n/*****************************************************************************/\n/* VWMEB-Inv-303489 - Read Diagnostic Data */\n/*! \\misra PRQA 3432 "Macro expansion does not result in expression\nand according to the Coding Guideline rule 4.6 AUTOSAR Compiler Abstraction should be used" */', start_line_num=1060, end_line_num=1076, type_='', function='', func_type=False), CodeComment(comment='Script didn\'t find any comment with keywords: [\'todo\', \'fixme\', "don\'t use", \'do not use\', \'remove\', \'why\', \'cz\', \'not implemented\']', start_line_num=None, end_line_num=None, type_=None, function=None, func_type=False), CodeComment(comment=None, start_line_num=None, end_line_num=None, type_="Script didn't search for type", function="Script didn't search for function", func_type=False), CodeComment(comment=None, start_line_num=None, end_line_num=None, type_="Script didn't search for type", function="Script didn't search for function", func_type=False), CodeComment(comment=None, start_line_num=None, end_line_num=None, type_="Script didn't search for type", function="Script didn't search for function", func_type=False), CodeComment(comment="The next comments are ones' that are not possible for the script to detect whether they're problematic or not", start_line_num=None, end_line_num=None, type_=None, function=None, func_type=False), CodeComment(comment=None, start_line_num=None, end_line_num=None, type_="Script didn't search for type", function="Script didn't search for function", func_type=False), CodeComment(comment=None, start_line_num=None, end_line_num=None, type_="Script didn't search for type", function="Script didn't search for function", func_type=False), CodeComment(comment=None, start_line_num=None, end_line_num=None, type_="Script didn't search for type", function="Script didn't search for function", func_type=False), CodeComment(comment='/*PRQA S 0380*/', start_line_num=27, end_line_num=27, type_='', function=None, func_type=False), CodeComment(comment='/* EcuProdDataParamOem */', start_line_num=29, end_line_num=29, type_='', function=None, func_type=False), CodeComment(comment='/* BUS Knockout data */', start_line_num=30, end_line_num=30, type_='', function=None, func_type=False), CodeComment(comment='/* Programming preconditions */', start_line_num=31, end_line_num=31, type_='', function=None, func_type=False), CodeComment(comment='/* Production mode data */', start_line_num=34, end_line_num=34, type_='', function=None, func_type=False), CodeComment(comment='/* For variable DID_0410_BootloaderTPBlocksize */', start_line_num=35, end_line_num=35, type_='', function=None, func_type=False), CodeComment(comment='/* DID F1B8 */', start_line_num=40, end_line_num=40, type_='', function=None, func_type=False), CodeComment(comment='/* PRQA S 4800 */', start_line_num=57, end_line_num=57, type_='', function=None, func_type=False), CodeComment(comment='/* block 1 */', start_line_num=62, end_line_num=62, type_='', function=None, func_type=False), CodeComment(comment='/* block 2 */', start_line_num=63, end_line_num=63, type_='', function=None, func_type=False), CodeComment(comment='/* block 3 */', start_line_num=64, end_line_num=64, type_='', function=None, func_type=False), CodeComment(comment='/* block 4 */', start_line_num=65, end_line_num=65, type_='', function=None, func_type=False), CodeComment(comment='/* -1 due to DownGradeProtection */', start_line_num=66, end_line_num=66, type_='', function=None, func_type=False), CodeComment(comment='/* Ver_80114 */', start_line_num=70, end_line_num=70, type_='', function=None, func_type=False), CodeComment(comment='/* Ver_80124 */', start_line_num=71, end_line_num=71, type_='', function=None, func_type=False), CodeComment(comment='/* Ver_80125 */', start_line_num=72, end_line_num=72, type_='', function=None, func_type=False), CodeComment(comment='/* Ver_80126 */', start_line_num=73, end_line_num=73, type_='', function=None, func_type=False), CodeComment(comment='/* Ver_80127 */', start_line_num=74, end_line_num=74, type_='', function=None, func_type=False), CodeComment(comment='/* Ver_80128 */', start_line_num=75, end_line_num=75, type_='', function=None, func_type=False), CodeComment(comment='/* Ver_DSDL */', start_line_num=76, end_line_num=76, type_='', function=None, func_type=False), CodeComment(comment='/* Ver_DUL */', start_line_num=77, end_line_num=77, type_='', function=None, func_type=False), CodeComment(comment='/* Ver_SFD */', start_line_num=78, end_line_num=78, type_='', function=None, func_type=False), CodeComment(comment='/* Ver_SWAP */', start_line_num=79, end_line_num=79, type_='', function=None, func_type=False), CodeComment(comment='/* Ver_ORU */', start_line_num=80, end_line_num=80, type_='', function=None, func_type=False), CodeComment(comment='/* Ver_PMode */', start_line_num=81, end_line_num=81, type_='', function=None, func_type=False), CodeComment(comment='/* Ver_WKMS */', start_line_num=82, end_line_num=82, type_='', function=None, func_type=False), CodeComment(comment='/*SWID_timestamp*/', start_line_num=85, end_line_num=85, type_='', function=None, func_type=False), CodeComment(comment='/*SWID_calibset*/', start_line_num=88, end_line_num=88, type_='', function=None, func_type=False), CodeComment(comment='/* change request: VWMEB-Inv-207330\n * DID length changed to 20, NVM block size remains 21 to preserve NVM layout.\n * The DCM-generated array type must not be used, as it is 20 bytes long,\n * and NVM read will write the 21th element too.*/', start_line_num=102, end_line_num=105, type_='', function=None, func_type=False), CodeComment(comment='/* change request: VWMEB-Inv-207330 */', start_line_num=115, end_line_num=115, type_='', function=None, func_type=False), CodeComment(comment='/* change request: VWMEB-Inv-207330 */', start_line_num=125, end_line_num=125, type_='', function=None, func_type=False), CodeComment(comment='/*! \\misra PRQA 4800 "This define automatically generated" */', start_line_num=139, end_line_num=139, type_='', function=None, func_type=False), CodeComment(comment='/* PRQA S 4800 */', start_line_num=140, end_line_num=140, type_='', function=None, func_type=False), CodeComment(comment='/*! \\misra PRQA 4800 "This define automatically generated" */', start_line_num=143, end_line_num=143, type_='', function=None, func_type=False), CodeComment(comment='/* PRQA S 4800 */', start_line_num=144, end_line_num=144, type_='', function=None, func_type=False), CodeComment(comment='/*! \\misra PRQA 4800 "This define automatically generated" */', start_line_num=169, end_line_num=169, type_='', function=None, func_type=False), CodeComment(comment='/* PRQA S 4800 */', start_line_num=170, end_line_num=170, type_='', function=None, func_type=False), CodeComment(comment='/*! \\misra PRQA 4800 "This define automatically generated" */', start_line_num=173, end_line_num=173, type_='', function=None, func_type=False), CodeComment(comment='/* PRQA S 4800 */', start_line_num=174, end_line_num=174, type_='', function=None, func_type=False), CodeComment(comment='/*! \\misra PRQA 2021 "This tentative definition is intended" */', start_line_num=179, end_line_num=179, type_='', function=None, func_type=False), CodeComment(comment='/* PRQA S 2021 */\n/*! \\misra PRQA 2021 "This tentative definition is intended" */', start_line_num=180, end_line_num=181, type_='', function=None, func_type=False), CodeComment(comment='/* PRQA S 2021 */\n/*! \\misra PRQA 2021 "This tentative definition is intended" */', start_line_num=182, end_line_num=183, type_='', function=None, func_type=False), CodeComment(comment='/* PRQA S 2021 */\n/* change request: VWMEB-Inv-207330 */', start_line_num=184, end_line_num=185, type_='', function=None, func_type=False), CodeComment(comment='/*! \\misra PRQA 4800 "This define automatically generated" */', start_line_num=187, end_line_num=187, type_='', function=None, func_type=False), CodeComment(comment='/* PRQA S 4800 */', start_line_num=188, end_line_num=188, type_='', function=None, func_type=False), CodeComment(comment='/*! \\misra PRQA 4800 "This define automatically generated" */', start_line_num=191, end_line_num=191, type_='', function=None, func_type=False), CodeComment(comment='/* PRQA S 4800 */', start_line_num=192, end_line_num=192, type_='', function=None, func_type=False), CodeComment(comment='/* block 1 */', start_line_num=197, end_line_num=197, type_='', function=None, func_type=False), CodeComment(comment='/* block 2 */', start_line_num=198, end_line_num=198, type_='', function=None, func_type=False), CodeComment(comment='/* block 3 */', start_line_num=199, end_line_num=199, type_='', function=None, func_type=False), CodeComment(comment='/* block 4 */', start_line_num=200, end_line_num=200, type_='', function=None, func_type=False), CodeComment(comment='/* -1 due to DownGradeProtection */', start_line_num=201, end_line_num=201, type_='', function=None, func_type=False), CodeComment(comment='/* -1 due to DownGradeProtection */', start_line_num=203, end_line_num=203, type_='', function=None, func_type=False), CodeComment(comment='/* -1 due to DownGradeProtection */', start_line_num=213, end_line_num=213, type_='', function=None, func_type=False), CodeComment(comment='/* -1 due to DownGradeProtection */', start_line_num=223, end_line_num=223, type_='', function=None, func_type=False), CodeComment(comment='/*! \\misra PRQA 1504 "The variable used in other component too" */', start_line_num=231, end_line_num=231, type_='', function=None, func_type=False), CodeComment(comment='/* PRQA S 1504 */', start_line_num=232, end_line_num=232, type_='', function=None, func_type=False), CodeComment(comment='/*! \\misra PRQA 1504 "The variable used in other component too" */', start_line_num=240, end_line_num=240, type_='', function=None, func_type=False), CodeComment(comment='/* PRQA S 1504 */', start_line_num=241, end_line_num=241, type_='', function=None, func_type=False), CodeComment(comment='/*! \\misra PRQA 1504 "The variable used in other component too" */', start_line_num=254, end_line_num=254, type_='', function=None, func_type=False), CodeComment(comment='/* PRQA S 1504 */', start_line_num=255, end_line_num=255, type_='', function=None, func_type=False), CodeComment(comment='/*! \\misra PRQA 4800 "This define automatically generated" */', start_line_num=267, end_line_num=267, type_='', function=None, func_type=False), CodeComment(comment='/* PRQA S 4800 */', start_line_num=268, end_line_num=268, type_='', function=None, func_type=False), CodeComment(comment='/* PRQA S 4800 */', start_line_num=273, end_line_num=273, type_='', function=None, func_type=False), CodeComment(comment='/* Declaration of static function Idp_ValidateAdminTable() */', start_line_num=276, end_line_num=276, type_='', function=None, func_type=False), CodeComment(comment='/* Declaration of static function Idp_ReadDIDFromInfoTable() */\n/*! \\misra PRQA 3432 "Macro expansion does not result in expression\nand according to the Coding Guideline rule 4.6 AUTOSAR Compiler Abstraction should be used" */', start_line_num=278, end_line_num=280, type_='', function=None, func_type=False), CodeComment(comment='/* PRQA S 3432 */\n/*! \\misra PRQA 3432 "Macro expansion does not result in expression\nand according to the Coding Guideline rule 4.6 AUTOSAR Compiler Abstraction should be used" */', start_line_num=283, end_line_num=285, type_='', function=None, func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=288, end_line_num=288, type_='', function=None, func_type=False), CodeComment(comment='/*! \\misra PRQA 0310 "chkprg_is_valid_rom_addr" function checks that after the cast\n   operator it is pointing to valid memory space." */', start_line_num=309, end_line_num=310, type_='', function='Idp_ValidateAdminTable', func_type=False), CodeComment(comment='/* PRQA S 0310 */', start_line_num=311, end_line_num=311, type_='', function='Idp_ValidateAdminTable', func_type=False), CodeComment(comment='/* Check if admin-Table is valid */', start_line_num=313, end_line_num=313, type_='', function='Idp_ValidateAdminTable', func_type=False), CodeComment(comment='/* Check if valid marker is set and block is not invalidated */\n/* Function "chkprg_is_marker_set" has no side effect */', start_line_num=317, end_line_num=318, type_='', function='Idp_ValidateAdminTable', func_type=False), CodeComment(comment='/*! \\misra PRQA 3415 "The logical operand is right" */', start_line_num=321, end_line_num=321, type_='', function='Idp_ValidateAdminTable', func_type=False), CodeComment(comment='/* PRQA S 3415 */', start_line_num=322, end_line_num=322, type_='', function='Idp_ValidateAdminTable', func_type=False), CodeComment(comment='/* Check that info table is a valid pointer in PFlash */\n/*! \\misra PRQA 0310 "chkprg_is_valid_rom_addr" function checks that after the cast\n            operator it is pointing to valid memory space." */', start_line_num=326, end_line_num=328, type_='', function='Idp_ValidateAdminTable', func_type=False), CodeComment(comment='/* PRQA S 0310 */', start_line_num=329, end_line_num=329, type_='', function='Idp_ValidateAdminTable', func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=358, end_line_num=358, type_='', function=None, func_type=False), CodeComment(comment='/*! \\misra PRQA 2981: variable initialization recommended by Coding Guideline Rule 4.14 */', start_line_num=360, end_line_num=360, type_='', function='Idp_ReadDIDFromInfoTable', func_type=False), CodeComment(comment='/* PRQA S 2981 */\n/*! \\misra PRQA 2981: variable initialization recommended by Coding Guideline Rule 4.14 */', start_line_num=361, end_line_num=362, type_='', function='Idp_ReadDIDFromInfoTable', func_type=False), CodeComment(comment='/* PRQA S 2981 */\n/*! \\misra PRQA 2981: variable initialization recommended by Coding Guideline Rule 4.14 */', start_line_num=363, end_line_num=364, type_='', function='Idp_ReadDIDFromInfoTable', func_type=False), CodeComment(comment='/* PRQA S 2981 */\n/*! \\misra PRQA 2981: variable initialization recommended by Coding Guideline Rule 4.14 */', start_line_num=365, end_line_num=366, type_='', function='Idp_ReadDIDFromInfoTable', func_type=False), CodeComment(comment='/* PRQA S 2981 */', start_line_num=367, end_line_num=367, type_='', function='Idp_ReadDIDFromInfoTable', func_type=False), CodeComment(comment='/* QAC: After the cast and array subscript operator the "chkprg_is_valid_rom_addr" function */\n/* checks that it is pointing to valid memory space.                                        */', start_line_num=369, end_line_num=370, type_='', function='Idp_ReadDIDFromInfoTable', func_type=False), CodeComment(comment='/* Check that the start address is pointing to valid memory space. */', start_line_num=372, end_line_num=372, type_='', function='Idp_ReadDIDFromInfoTable', func_type=False), CodeComment(comment='/* Search the DID witch want to read from the Info Table */', start_line_num=381, end_line_num=381, type_='', function='Idp_ReadDIDFromInfoTable', func_type=False), CodeComment(comment='/*! \\misra PRQA 0491 "This array subscript operator is useable here" */', start_line_num=384, end_line_num=384, type_='', function='Idp_ReadDIDFromInfoTable', func_type=False), CodeComment(comment='/* PRQA S 0491 */', start_line_num=385, end_line_num=385, type_='', function='Idp_ReadDIDFromInfoTable', func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=416, end_line_num=416, type_='', function=None, func_type=False), CodeComment(comment='/*! \\misra PRQA 2981: variable initialization recommended by Coding Guideline Rule 4.14 */', start_line_num=418, end_line_num=418, type_='', function='Idp_ReadOut_the_founded_DID', func_type=False), CodeComment(comment='/* PRQA S 2981 */', start_line_num=419, end_line_num=419, type_='', function='Idp_ReadOut_the_founded_DID', func_type=False), CodeComment(comment='/*! \\misra PRQA 0306,0491 "This array subscript operator is useable here" */', start_line_num=422, end_line_num=422, type_='', function='Idp_ReadOut_the_founded_DID', func_type=False), CodeComment(comment='/* PRQA S 0306,0491 */', start_line_num=423, end_line_num=423, type_='', function='Idp_ReadOut_the_founded_DID', func_type=False), CodeComment(comment='/* Check that the start address is a valid pointer in PFlash */', start_line_num=425, end_line_num=425, type_='', function='Idp_ReadOut_the_founded_DID', func_type=False), CodeComment(comment='/* copy data into the result buffer */\n/*! \\misra PRQA 0491 "This cast is useable here" */', start_line_num=428, end_line_num=429, type_='', function='Idp_ReadOut_the_founded_DID', func_type=False), CodeComment(comment='/* PRQA S 0491 */', start_line_num=430, end_line_num=430, type_='', function='Idp_ReadOut_the_founded_DID', func_type=False), CodeComment(comment='/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n         source and destination are the same type" */', start_line_num=432, end_line_num=433, type_='', function='Idp_ReadOut_the_founded_DID', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=434, end_line_num=434, type_='', function='Idp_ReadOut_the_founded_DID', func_type=False), CodeComment(comment='/*! \\misra PRQA 2981: variable initialization recommended by Coding Guideline Rule 4.14 */', start_line_num=458, end_line_num=458, type_='', function='Idp_F1A0_CheckFormat', func_type=False), CodeComment(comment='/* PRQA S 2981 */', start_line_num=459, end_line_num=459, type_='', function='Idp_F1A0_CheckFormat', func_type=False), CodeComment(comment='/*! \\misra PRQA 0771 "Improve the running speed" */', start_line_num=462, end_line_num=462, type_='', function='Idp_F1A0_CheckFormat', func_type=False), CodeComment(comment='/*PRQA S 0771*/', start_line_num=463, end_line_num=463, type_='', function='Idp_F1A0_CheckFormat', func_type=False), CodeComment(comment='/* Front number range check */', start_line_num=468, end_line_num=468, type_='', function='Idp_F1A0_CheckFormat', func_type=False), CodeComment(comment='/* Middle and end group range check */', start_line_num=477, end_line_num=477, type_='', function='Idp_F1A0_CheckFormat', func_type=False), CodeComment(comment='/* Part number suffix range check */', start_line_num=486, end_line_num=486, type_='', function='Idp_F1A0_CheckFormat', func_type=False), CodeComment(comment='/* Supress QAC warning */', start_line_num=494, end_line_num=494, type_='', function='Idp_F1A0_CheckFormat', func_type=False), CodeComment(comment='/*! \\misra PRQA 3432  "This is generated by Tresos this way. Macro expansion does not result in expression where \noperator precedence could cause an issue, so the warning can be safely suppressed. Resolving by adding parentheses \nis not possible because it would result in compile error, and the SW cannot be built." */', start_line_num=520, end_line_num=522, type_='', function=None, func_type=False), CodeComment(comment='/*PRQA S 3432*/', start_line_num=524, end_line_num=524, type_='', function=None, func_type=False), CodeComment(comment='/* copy data into the result buffer */\n/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=530, end_line_num=532, type_='', function='Idp_F187_VWSparePartNumber_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=533, end_line_num=533, type_='', function='Idp_F187_VWSparePartNumber_ReadData', func_type=False), CodeComment(comment='/*! \\misra PRQA 3432  "This is generated by Tresos this way. Macro expansion does not result in expression where \noperator precedence could cause an issue, so the warning can be safely suppressed. Resolving by adding parentheses \nis not possible because it would result in compile error, and the SW cannot be built." */', start_line_num=556, end_line_num=558, type_='', function=None, func_type=False), CodeComment(comment='/*PRQA S 3432*/', start_line_num=560, end_line_num=560, type_='', function=None, func_type=False), CodeComment(comment='/* copy data into the result buffer */\n/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=566, end_line_num=568, type_='', function='Idp_F189_VWApplicationSoftwareVersionNumber_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=569, end_line_num=569, type_='', function='Idp_F189_VWApplicationSoftwareVersionNumber_ReadData', func_type=False), CodeComment(comment='/*! \\misra PRQA 3432  "This is generated by Tresos this way. Macro expansion does not result in expression where \noperator precedence could cause an issue, so the warning can be safely suppressed. Resolving by adding parentheses \nis not possible because it would result in compile error, and the SW cannot be built." */', start_line_num=593, end_line_num=595, type_='', function=None, func_type=False), CodeComment(comment='/*PRQA S 3432*/', start_line_num=597, end_line_num=597, type_='', function=None, func_type=False), CodeComment(comment='/* copy data into the result buffer */\n/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=603, end_line_num=605, type_='', function='Idp_F18C_ECUSerialNumber_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=606, end_line_num=606, type_='', function='Idp_F18C_ECUSerialNumber_ReadData', func_type=False), CodeComment(comment='/*! \\misra PRQA 3432  "This is generated by Tresos this way. Macro expansion does not result in expression where \noperator precedence could cause an issue, so the warning can be safely suppressed. Resolving by adding parentheses \nis not possible because it would result in compile error, and the SW cannot be built." */', start_line_num=630, end_line_num=632, type_='', function=None, func_type=False), CodeComment(comment='/*PRQA S 3432*/', start_line_num=634, end_line_num=634, type_='', function=None, func_type=False), CodeComment(comment='/* copy data into the result buffer */\n/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=640, end_line_num=642, type_='', function='Idp_F191_ECUHardwareNumber_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=643, end_line_num=643, type_='', function='Idp_F191_ECUHardwareNumber_ReadData', func_type=False), CodeComment(comment='/*! \\misra PRQA 3432  "This is generated by Tresos this way. Macro expansion does not result in expression where \noperator precedence could cause an issue, so the warning can be safely suppressed. Resolving by adding parentheses \nis not possible because it would result in compile error, and the SW cannot be built." */', start_line_num=668, end_line_num=670, type_='', function=None, func_type=False), CodeComment(comment='/*PRQA S 3432*/', start_line_num=672, end_line_num=672, type_='', function=None, func_type=False), CodeComment(comment='/* copy data into the result buffer */\n/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=678, end_line_num=680, type_='', function='Idp_F192_SystemSupplierECUHardwareNumber_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=681, end_line_num=681, type_='', function='Idp_F192_SystemSupplierECUHardwareNumber_ReadData', func_type=False), CodeComment(comment='/*! \\misra PRQA 3432  "This is generated by Tresos this way. Macro expansion does not result in expression where \noperator precedence could cause an issue, so the warning can be safely suppressed. Resolving by adding parentheses \nis not possible because it would result in compile error, and the SW cannot be built." */', start_line_num=704, end_line_num=706, type_='', function=None, func_type=False), CodeComment(comment='/*PRQA S 3432*/', start_line_num=708, end_line_num=708, type_='', function=None, func_type=False), CodeComment(comment='/* copy data into the result buffer */\n/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=714, end_line_num=716, type_='', function='Idp_F194_SystemSupplierECUSoftwareNumber_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=717, end_line_num=717, type_='', function='Idp_F194_SystemSupplierECUSoftwareNumber_ReadData', func_type=False), CodeComment(comment='/*! \\misra PRQA 3432  "This is generated by Tresos this way. Macro expansion does not result in expression where \noperator precedence could cause an issue, so the warning can be safely suppressed. Resolving by adding parentheses \nis not possible because it would result in compile error, and the SW cannot be built." */', start_line_num=739, end_line_num=741, type_='', function=None, func_type=False), CodeComment(comment='/*PRQA S 3432*/', start_line_num=743, end_line_num=743, type_='', function=None, func_type=False), CodeComment(comment='/* copy data into the result buffer */\n/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=749, end_line_num=751, type_='', function='Idp_F195_SystemSupplierECUSoftwareVersionNumber_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=752, end_line_num=752, type_='', function='Idp_F195_SystemSupplierECUSoftwareVersionNumber_ReadData', func_type=False), CodeComment(comment='/*PRQA S 3432*/', start_line_num=774, end_line_num=774, type_='', function=None, func_type=False), CodeComment(comment='/*! \\misra PRQA 2981: variable initialization recommended by Coding Guideline Rule 4.14 */', start_line_num=776, end_line_num=776, type_='', function='Idp_F19E_AsamOdxFileIdentifier_ReadDataLength', func_type=False), CodeComment(comment='/* PRQA S 2981 */', start_line_num=777, end_line_num=777, type_='', function='Idp_F19E_AsamOdxFileIdentifier_ReadDataLength', func_type=False), CodeComment(comment='/* Search the first NULL byte */', start_line_num=783, end_line_num=783, type_='', function='Idp_F19E_AsamOdxFileIdentifier_ReadDataLength', func_type=False), CodeComment(comment='/* Save the first NULL byte position. */', start_line_num=788, end_line_num=788, type_='', function='Idp_F19E_AsamOdxFileIdentifier_ReadDataLength', func_type=False), CodeComment(comment='/* If the NULL byte is not exist, than the size of the DID is 25 byte (init value) due to Q-LAH_80125_T2-7: */\n/* For the case that this DataIdentifier is calibrated with 25 bytes, it must not be terminated by 0x00 */', start_line_num=797, end_line_num=798, type_='', function='Idp_F19E_AsamOdxFileIdentifier_ReadDataLength', func_type=False), CodeComment(comment='/*! \\misra PRQA 3432  "This is generated by Tresos this way. Macro expansion does not result in expression where \noperator precedence could cause an issue, so the warning can be safely suppressed. Resolving by adding parentheses \nis not possible because it would result in compile error, and the SW cannot be built." */', start_line_num=823, end_line_num=825, type_='', function=None, func_type=False), CodeComment(comment='/*PRQA S 3432*/', start_line_num=827, end_line_num=827, type_='', function=None, func_type=False), CodeComment(comment='/*! \\misra PRQA 2981: variable initialization recommended by Coding Guideline Rule 4.14 */', start_line_num=830, end_line_num=830, type_='', function='Idp_F19E_AsamOdxFileIdentifier_ReadData', func_type=False), CodeComment(comment='/* PRQA S 2981 */', start_line_num=831, end_line_num=831, type_='', function='Idp_F19E_AsamOdxFileIdentifier_ReadData', func_type=False), CodeComment(comment='/* Search the first NULL byte */', start_line_num=837, end_line_num=837, type_='', function='Idp_F19E_AsamOdxFileIdentifier_ReadData', func_type=False), CodeComment(comment='/* Save the first NULL byte position. */', start_line_num=842, end_line_num=842, type_='', function='Idp_F19E_AsamOdxFileIdentifier_ReadData', func_type=False), CodeComment(comment='/* If the NULL byte is not exist, than the size of the DID is 25 byte (init value) due to Q-LAH_80125_T2-7: */\n/* For the case that this DataIdentifier is calibrated with 25 bytes, it must not be terminated by 0x00 */\n/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=851, end_line_num=854, type_='', function='Idp_F19E_AsamOdxFileIdentifier_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=855, end_line_num=855, type_='', function='Idp_F19E_AsamOdxFileIdentifier_ReadData', func_type=False), CodeComment(comment='/*! \\misra PRQA 3432  "This is generated by Tresos this way. Macro expansion does not result in expression where \noperator precedence could cause an issue, so the warning can be safely suppressed. Resolving by adding parentheses \nis not possible because it would result in compile error, and the SW cannot be built." */', start_line_num=878, end_line_num=880, type_='', function=None, func_type=False), CodeComment(comment='/*PRQA S 3432*/', start_line_num=882, end_line_num=882, type_='', function=None, func_type=False), CodeComment(comment='/* copy data into the result buffer */\n/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=888, end_line_num=890, type_='', function='Idp_F1A2_AsamOdxFileVersion_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=891, end_line_num=891, type_='', function='Idp_F1A2_AsamOdxFileVersion_ReadData', func_type=False), CodeComment(comment='/*! \\misra PRQA 3432  "This is generated by Tresos this way. Macro expansion does not result in expression where \noperator precedence could cause an issue, so the warning can be safely suppressed. Resolving by adding parentheses \nis not possible because it would result in compile error, and the SW cannot be built." */', start_line_num=914, end_line_num=916, type_='', function=None, func_type=False), CodeComment(comment='/*PRQA S 3432*/', start_line_num=918, end_line_num=918, type_='', function=None, func_type=False), CodeComment(comment='/*! \\misra PRQA 2981: variable initialization recommended by Coding Guideline Rule 4.14 */', start_line_num=921, end_line_num=921, type_='', function='Idp_F1A3_VWECUHardwareVersionNumber_ReadData', func_type=False), CodeComment(comment='/* PRQA S 2981 */', start_line_num=922, end_line_num=922, type_='', function='Idp_F1A3_VWECUHardwareVersionNumber_ReadData', func_type=False), CodeComment(comment='/* copy data into the result buffer */\n/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=927, end_line_num=929, type_='', function='Idp_F1A3_VWECUHardwareVersionNumber_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=930, end_line_num=930, type_='', function='Idp_F1A3_VWECUHardwareVersionNumber_ReadData', func_type=False), CodeComment(comment='/* Overwrite the Life cyle byte (first byte) */', start_line_num=934, end_line_num=934, type_='', function='Idp_F1A3_VWECUHardwareVersionNumber_ReadData', func_type=False), CodeComment(comment='/* Set the first byte to "series" */\n/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n         source and destination are the same type" */', start_line_num=939, end_line_num=941, type_='', function='Idp_F1A3_VWECUHardwareVersionNumber_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=942, end_line_num=942, type_='', function='Idp_F1A3_VWECUHardwareVersionNumber_ReadData', func_type=False), CodeComment(comment='/* Set the first byte to "sample" */\n/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n         source and destination are the same type" */', start_line_num=948, end_line_num=950, type_='', function='Idp_F1A3_VWECUHardwareVersionNumber_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=951, end_line_num=951, type_='', function='Idp_F1A3_VWECUHardwareVersionNumber_ReadData', func_type=False), CodeComment(comment='/*PRQA S 3432*/', start_line_num=979, end_line_num=979, type_='', function=None, func_type=False), CodeComment(comment='/* copy data into the result buffer */\n/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=984, end_line_num=986, type_='', function='Idp_F1AD_EngineCodeLetters_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=987, end_line_num=987, type_='', function='Idp_F1AD_EngineCodeLetters_ReadData', func_type=False), CodeComment(comment='/*! \\misra PRQA 3432 "Macro expansion does not result in expression\nand according to the Coding Guideline rule 4.6 AUTOSAR Compiler Abstraction should be used" */', start_line_num=1010, end_line_num=1011, type_='', function=None, func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=1013, end_line_num=1013, type_='', function=None, func_type=False), CodeComment(comment='/* copy data into the result buffer */\n/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=1019, end_line_num=1021, type_='', function='Idp_F1B4_Technical_specifications_version_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=1022, end_line_num=1022, type_='', function='Idp_F1B4_Technical_specifications_version_ReadData', func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=1044, end_line_num=1044, type_='', function=None, func_type=False), CodeComment(comment='/* PRQA S 3206 */', start_line_num=1044, end_line_num=1044, type_='', function=None, func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=1078, end_line_num=1078, type_='', function=None, func_type=False), CodeComment(comment='/* suppress unused argument warning */', start_line_num=1084, end_line_num=1084, type_='', function='Idp_F1B8_VW_system_firmware_versions_ReadData', func_type=False), CodeComment(comment='/* Read Firmware versions of SiemensBoot (if present), BootManager, and HSM */', start_line_num=1094, end_line_num=1094, type_='', function='Idp_F1B8_VW_system_firmware_versions_ReadData', func_type=False), CodeComment(comment='/* First byte is the number of firmware modules */\n/*! \\misra PRQA 0489 "This pointer arithmetic is permitted and needed" */', start_line_num=1096, end_line_num=1097, type_='', function='Idp_F1B8_VW_system_firmware_versions_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0489 */', start_line_num=1098, end_line_num=1098, type_='', function='Idp_F1B8_VW_system_firmware_versions_ReadData', func_type=False), CodeComment(comment='/* Siemens bootloader is optional module,set output bytes only if this is available */\n/*! \\misra PRQA 0488 "This pointer arithmetic is permitted and needed" */', start_line_num=1102, end_line_num=1103, type_='', function='Idp_F1B8_VW_system_firmware_versions_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0488 */\n/*! \\misra PRQA 0488 "This operation is needed." */', start_line_num=1104, end_line_num=1105, type_='', function='Idp_F1B8_VW_system_firmware_versions_ReadData', func_type=False), CodeComment(comment='/* PRQA S 2984 */', start_line_num=1106, end_line_num=1106, type_='', function='Idp_F1B8_VW_system_firmware_versions_ReadData', func_type=False), CodeComment(comment='/* Always write BM version bytes, default value is used if not available */', start_line_num=1109, end_line_num=1109, type_='', function='Idp_F1B8_VW_system_firmware_versions_ReadData', func_type=False), CodeComment(comment='/*! \\misra PRQA 0488 "This pointer arithmetic is permitted and needed" */', start_line_num=1112, end_line_num=1112, type_='', function='Idp_F1B8_VW_system_firmware_versions_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0488 */', start_line_num=1113, end_line_num=1113, type_='', function='Idp_F1B8_VW_system_firmware_versions_ReadData', func_type=False), CodeComment(comment='/* Always write HSM version bytes, default value is used if not available */', start_line_num=1116, end_line_num=1116, type_='', function='Idp_F1B8_VW_system_firmware_versions_ReadData', func_type=False), CodeComment(comment='/*! \\misra PRQA 0488 "This pointer arithmetic is permitted and needed" */', start_line_num=1119, end_line_num=1119, type_='', function='Idp_F1B8_VW_system_firmware_versions_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0488 */', start_line_num=1120, end_line_num=1120, type_='', function='Idp_F1B8_VW_system_firmware_versions_ReadData', func_type=False), CodeComment(comment='/* format ADIS BM version */\n/*! \\misra PRQA 0491 "Array subscripting on pointer is necessary due to the given AutoSAR interface." */', start_line_num=1123, end_line_num=1124, type_='', function='Idp_F1B8_VW_system_firmware_versions_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0491 */\n/*! \\misra PRQA 0491 "Array subscripting on pointer is necessary due to the given AutoSAR interface." */', start_line_num=1125, end_line_num=1126, type_='', function='Idp_F1B8_VW_system_firmware_versions_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0491 */\n/*! \\misra PRQA 0491 "Array subscripting on pointer is necessary due to the given AutoSAR interface." */', start_line_num=1127, end_line_num=1128, type_='', function='Idp_F1B8_VW_system_firmware_versions_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0491 */\n/*! \\misra PRQA 0491 "Array subscripting on pointer is necessary due to the given AutoSAR interface." */', start_line_num=1129, end_line_num=1130, type_='', function='Idp_F1B8_VW_system_firmware_versions_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0491 */\n/*! \\misra PRQA 0488 "This pointer arithmetic is permitted and needed" */', start_line_num=1131, end_line_num=1132, type_='', function='Idp_F1B8_VW_system_firmware_versions_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0488 */', start_line_num=1133, end_line_num=1133, type_='', function='Idp_F1B8_VW_system_firmware_versions_ReadData', func_type=False), CodeComment(comment='/* format ADIS BL version */\n/*! \\misra PRQA 0491 "Array subscripting on pointer is necessary due to the given AutoSAR interface." */', start_line_num=1136, end_line_num=1137, type_='', function='Idp_F1B8_VW_system_firmware_versions_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0491 */\n/*! \\misra PRQA 0491 "Array subscripting on pointer is necessary due to the given AutoSAR interface." */', start_line_num=1138, end_line_num=1139, type_='', function='Idp_F1B8_VW_system_firmware_versions_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0491 */\n/*! \\misra PRQA 0491 "Array subscripting on pointer is necessary due to the given AutoSAR interface." */', start_line_num=1140, end_line_num=1141, type_='', function='Idp_F1B8_VW_system_firmware_versions_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0491 */\n/*! \\misra PRQA 0491 "Array subscripting on pointer is necessary due to the given AutoSAR interface." */', start_line_num=1142, end_line_num=1143, type_='', function='Idp_F1B8_VW_system_firmware_versions_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0491 */\n/*! \\misra PRQA 0491 "Array subscripting on pointer is necessary due to the given AutoSAR interface." */', start_line_num=1144, end_line_num=1145, type_='', function='Idp_F1B8_VW_system_firmware_versions_ReadData', func_type=False), CodeComment(comment='/* Now we know the number of firmware modules, update first byte */', start_line_num=1148, end_line_num=1148, type_='', function='Idp_F1B8_VW_system_firmware_versions_ReadData', func_type=False), CodeComment(comment='/*! \\misra PRQA 3432 "Macro expansion does not result in expression\nand according to the Coding Guideline rule 4.6 AUTOSAR Compiler Abstraction should be used" */', start_line_num=1173, end_line_num=1174, type_='', function=None, func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=1176, end_line_num=1176, type_='', function=None, func_type=False), CodeComment(comment='/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=1183, end_line_num=1184, type_='', function='Idp_F1DF_ECUProgrammingInformation_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=1185, end_line_num=1185, type_='', function='Idp_F1DF_ECUProgrammingInformation_ReadData', func_type=False), CodeComment(comment='/*! \\misra PRQA 3432 "Macro expansion does not result in expression\nand according to the Coding Guideline rule 4.6 AUTOSAR Compiler Abstraction should be used" */', start_line_num=1208, end_line_num=1209, type_='', function=None, func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=1211, end_line_num=1211, type_='', function=None, func_type=False), CodeComment(comment='/* copy data into the result buffer */\n/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=1216, end_line_num=1218, type_='', function='Idp_F197_VWSystemNameOrEngineType_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=1219, end_line_num=1219, type_='', function='Idp_F197_VWSystemNameOrEngineType_ReadData', func_type=False), CodeComment(comment='/*! \\misra PRQA 3432 "Macro expansion does not result in expression\nand according to the Coding Guideline rule 4.6 AUTOSAR Compiler Abstraction should be used" */', start_line_num=1243, end_line_num=1244, type_='', function=None, func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=1246, end_line_num=1246, type_='', function=None, func_type=False), CodeComment(comment='/* DownGradeProtection incl. */', start_line_num=1256, end_line_num=1256, type_='', function='Idp_x0407_VWLogicalSoftwareBlockCounterOfProgrammingAttempts_ReadData', func_type=False), CodeComment(comment='/* Byte order have to be swapped for the diagnostic response because\n           of the intel/motorola byte order conversion. */', start_line_num=1261, end_line_num=1262, type_='', function='Idp_x0407_VWLogicalSoftwareBlockCounterOfProgrammingAttempts_ReadData', func_type=False), CodeComment(comment='/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n          source and destination are the same type" */', start_line_num=1263, end_line_num=1264, type_='', function='Idp_x0407_VWLogicalSoftwareBlockCounterOfProgrammingAttempts_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=1265, end_line_num=1265, type_='', function='Idp_x0407_VWLogicalSoftwareBlockCounterOfProgrammingAttempts_ReadData', func_type=False), CodeComment(comment='/* copy data into the result buffer */\n/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=1267, end_line_num=1269, type_='', function='Idp_x0407_VWLogicalSoftwareBlockCounterOfProgrammingAttempts_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=1270, end_line_num=1270, type_='', function='Idp_x0407_VWLogicalSoftwareBlockCounterOfProgrammingAttempts_ReadData', func_type=False), CodeComment(comment='/*! \\misra PRQA 3432 "Macro expansion does not result in expression\nand according to the Coding Guideline rule 4.6 AUTOSAR Compiler Abstraction should be used" */', start_line_num=1294, end_line_num=1295, type_='', function=None, func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=1297, end_line_num=1297, type_='', function=None, func_type=False), CodeComment(comment='/* DownGradeProtection incl. */', start_line_num=1305, end_line_num=1305, type_='', function='Idp_x040F_VWLogicalSoftwareBlockLockValue_ReadData', func_type=False), CodeComment(comment='/* Check if NvM block is empty */', start_line_num=1310, end_line_num=1310, type_='', function='Idp_x040F_VWLogicalSoftwareBlockLockValue_ReadData', func_type=False), CodeComment(comment='/* Byte order have to be swapped for the diagnostic response because\n            of the intel/motorola byte order conversion. */', start_line_num=1317, end_line_num=1318, type_='', function='Idp_x040F_VWLogicalSoftwareBlockLockValue_ReadData', func_type=False), CodeComment(comment='/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n            source and destination are the same type" */', start_line_num=1319, end_line_num=1320, type_='', function='Idp_x040F_VWLogicalSoftwareBlockLockValue_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=1321, end_line_num=1321, type_='', function='Idp_x040F_VWLogicalSoftwareBlockLockValue_ReadData', func_type=False), CodeComment(comment='/* copy data into the result buffer */', start_line_num=1324, end_line_num=1324, type_='', function='Idp_x040F_VWLogicalSoftwareBlockLockValue_ReadData', func_type=False), CodeComment(comment='/* Common NvM block is empty, use default data */\n/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n         source and destination are the same type" */', start_line_num=1327, end_line_num=1329, type_='', function='Idp_x040F_VWLogicalSoftwareBlockLockValue_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=1330, end_line_num=1330, type_='', function='Idp_x040F_VWLogicalSoftwareBlockLockValue_ReadData', func_type=False), CodeComment(comment='/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n         source and destination are the same type" */', start_line_num=1335, end_line_num=1336, type_='', function='Idp_x040F_VWLogicalSoftwareBlockLockValue_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=1337, end_line_num=1337, type_='', function='Idp_x040F_VWLogicalSoftwareBlockLockValue_ReadData', func_type=False), CodeComment(comment='/*! \\misra PRQA 3432 "Macro expansion does not result in expression\nand according to the Coding Guideline rule 4.6 AUTOSAR Compiler Abstraction should be used" */', start_line_num=1362, end_line_num=1363, type_='', function=None, func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=1365, end_line_num=1365, type_='', function=None, func_type=False), CodeComment(comment='/* copy data into the result buffer */\n/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=1371, end_line_num=1373, type_='', function='Idp_x0410_BootloaderTPBlocksize_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=1374, end_line_num=1374, type_='', function='Idp_x0410_BootloaderTPBlocksize_ReadData', func_type=False), CodeComment(comment='/*! \\misra PRQA 3432 "Macro expansion does not result in expression\nand according to the Coding Guideline rule 4.6 AUTOSAR Compiler Abstraction should be used" */', start_line_num=1399, end_line_num=1400, type_='', function=None, func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=1402, end_line_num=1402, type_='', function=None, func_type=False), CodeComment(comment='/* DownGradeProtection incl. */', start_line_num=1409, end_line_num=1409, type_='', function='Idp_F15B_FingerprintAndProgrammingDateOfLogicalSoftwareBlocks_ReadData', func_type=False), CodeComment(comment='/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n         source and destination are the same type" */', start_line_num=1412, end_line_num=1413, type_='', function='Idp_F15B_FingerprintAndProgrammingDateOfLogicalSoftwareBlocks_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=1414, end_line_num=1414, type_='', function='Idp_F15B_FingerprintAndProgrammingDateOfLogicalSoftwareBlocks_ReadData', func_type=False), CodeComment(comment='/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n         source and destination are the same type" */', start_line_num=1418, end_line_num=1419, type_='', function='Idp_F15B_FingerprintAndProgrammingDateOfLogicalSoftwareBlocks_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=1420, end_line_num=1420, type_='', function='Idp_F15B_FingerprintAndProgrammingDateOfLogicalSoftwareBlocks_ReadData', func_type=False), CodeComment(comment='/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n         source and destination are the same type" */', start_line_num=1424, end_line_num=1425, type_='', function='Idp_F15B_FingerprintAndProgrammingDateOfLogicalSoftwareBlocks_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=1426, end_line_num=1426, type_='', function='Idp_F15B_FingerprintAndProgrammingDateOfLogicalSoftwareBlocks_ReadData', func_type=False), CodeComment(comment='/* copy data into the result buffer */\n/* The array operand is needed for the correct data handling */\n/*! \\misra PRQA 0492 "The array operand is needed for the correct data handling" */\n/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n         source and destination are the same type" */', start_line_num=1433, end_line_num=1437, type_='', function='Idp_F15B_FingerprintAndProgrammingDateOfLogicalSoftwareBlocks_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0492 */', start_line_num=1438, end_line_num=1438, type_='', function='Idp_F15B_FingerprintAndProgrammingDateOfLogicalSoftwareBlocks_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=1438, end_line_num=1438, type_='', function='Idp_F15B_FingerprintAndProgrammingDateOfLogicalSoftwareBlocks_ReadData', func_type=False), CodeComment(comment='/*! \\misra PRQA 3432 "Macro expansion does not result in expression\nand according to the Coding Guideline rule 4.6 AUTOSAR Compiler Abstraction should be used" */', start_line_num=1465, end_line_num=1466, type_='', function=None, func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=1468, end_line_num=1468, type_='', function=None, func_type=False), CodeComment(comment='/* copy data into the result buffer */\n/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=1473, end_line_num=1475, type_='', function='Idp_F18A_SystemSupplierIdentifier_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=1476, end_line_num=1476, type_='', function='Idp_F18A_SystemSupplierIdentifier_ReadData', func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=1498, end_line_num=1498, type_='', function=None, func_type=False), CodeComment(comment='/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n     source and destination are the same type" */', start_line_num=1502, end_line_num=1503, type_='', function='Idp_F1A0_VWDataSetNumberOrECUDataContainerNumber_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=1504, end_line_num=1504, type_='', function='Idp_F1A0_VWDataSetNumberOrECUDataContainerNumber_ReadData', func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=1528, end_line_num=1528, type_='', function=None, func_type=False), CodeComment(comment='/*! \\misra PRQA 2981: variable initialization recommended by Coding Guideline Rule 4.14 */', start_line_num=1530, end_line_num=1530, type_='', function='Idp_F1A0_VWDataSetNumberOrECUDataContainerNumber_WriteData', func_type=False), CodeComment(comment='/* PRQA S 2981 */', start_line_num=1531, end_line_num=1531, type_='', function='Idp_F1A0_VWDataSetNumberOrECUDataContainerNumber_WriteData', func_type=False), CodeComment(comment='/* Process the incoming Data, because only specific range numbers is acceptable. */\n/*! \\misra PRQA 4471 "Needed for data analyzing" */\n/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n     source and destination are the same type" */', start_line_num=1537, end_line_num=1540, type_='', function='Idp_F1A0_VWDataSetNumberOrECUDataContainerNumber_WriteData', func_type=False), CodeComment(comment='/*PRQA S 4471*/', start_line_num=1541, end_line_num=1541, type_='', function='Idp_F1A0_VWDataSetNumberOrECUDataContainerNumber_WriteData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=1541, end_line_num=1541, type_='', function='Idp_F1A0_VWDataSetNumberOrECUDataContainerNumber_WriteData', func_type=False), CodeComment(comment='/* If the ranges are correct */', start_line_num=1545, end_line_num=1545, type_='', function='Idp_F1A0_VWDataSetNumberOrECUDataContainerNumber_WriteData', func_type=False), CodeComment(comment='/* DataIdentifier filling in */', start_line_num=1547, end_line_num=1547, type_='', function='Idp_F1A0_VWDataSetNumberOrECUDataContainerNumber_WriteData', func_type=False), CodeComment(comment='/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n        source and destination are the same type" */', start_line_num=1552, end_line_num=1553, type_='', function='Idp_F1A0_VWDataSetNumberOrECUDataContainerNumber_WriteData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=1554, end_line_num=1554, type_='', function='Idp_F1A0_VWDataSetNumberOrECUDataContainerNumber_WriteData', func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=1587, end_line_num=1587, type_='', function=None, func_type=False), CodeComment(comment='/*! \\misra PRQA 3432 "Macro expansion does not result in expression\nand according to the Coding Guideline rule 4.6 AUTOSAR Compiler Abstraction should be used" */', start_line_num=1615, end_line_num=1616, type_='', function=None, func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=1618, end_line_num=1618, type_='', function=None, func_type=False), CodeComment(comment='/* This is an ID added in hex for ascii according to req: Q-LAH_80125_T2-11*/', start_line_num=1622, end_line_num=1622, type_='', function='Idp_F1AA_VWWorkshopSystemName_ReadData', func_type=False), CodeComment(comment='/* copy data into the result buffer */\n/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=1626, end_line_num=1628, type_='', function='Idp_F1AA_VWWorkshopSystemName_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=1629, end_line_num=1629, type_='', function='Idp_F1AA_VWWorkshopSystemName_ReadData', func_type=False), CodeComment(comment='/*! \\misra PRQA 3432 "Macro expansion does not result in expression\nand according to the Coding Guideline rule 4.6 AUTOSAR Compiler Abstraction should be used" */', start_line_num=1652, end_line_num=1653, type_='', function=None, func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=1655, end_line_num=1655, type_='', function=None, func_type=False), CodeComment(comment='/* DownGradeProtection incl. */', start_line_num=1662, end_line_num=1662, type_='', function='Idp_F1AB_VWLogicalSoftwareBlockVersion_ReadData', func_type=False), CodeComment(comment='/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n         source and destination are the same type" */', start_line_num=1665, end_line_num=1666, type_='', function='Idp_F1AB_VWLogicalSoftwareBlockVersion_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=1667, end_line_num=1667, type_='', function='Idp_F1AB_VWLogicalSoftwareBlockVersion_ReadData', func_type=False), CodeComment(comment='/* copy data into the result buffer */\n/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=1671, end_line_num=1673, type_='', function='Idp_F1AB_VWLogicalSoftwareBlockVersion_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=1674, end_line_num=1674, type_='', function='Idp_F1AB_VWLogicalSoftwareBlockVersion_ReadData', func_type=False), CodeComment(comment='/*! \\misra PRQA 3432 "Macro expansion does not result in expression\nand according to the Coding Guideline rule 4.6 AUTOSAR Compiler Abstraction should be used" */', start_line_num=1699, end_line_num=1700, type_='', function=None, func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=1702, end_line_num=1702, type_='', function=None, func_type=False), CodeComment(comment='/* convert little endian to big endian */\n/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=1716, end_line_num=1718, type_='', function='Idp_F1AF_AUTOSAR_standard_application_software_identification_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */\n/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=1719, end_line_num=1721, type_='', function='Idp_F1AF_AUTOSAR_standard_application_software_identification_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=1722, end_line_num=1722, type_='', function='Idp_F1AF_AUTOSAR_standard_application_software_identification_ReadData', func_type=False), CodeComment(comment='/* Swap the moduleID with the vendorID, because the order of structure members is different from the */\n/* DID format: SSW-Modul ID (2 Byte) + Vendor-ID (2 Byte) + SSW-Version (3 Byte).                    */', start_line_num=1724, end_line_num=1725, type_='', function='Idp_F1AF_AUTOSAR_standard_application_software_identification_ReadData', func_type=False), CodeComment(comment='/* copy data into the result buffer */\n/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=1730, end_line_num=1732, type_='', function='Idp_F1AF_AUTOSAR_standard_application_software_identification_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=1733, end_line_num=1733, type_='', function='Idp_F1AF_AUTOSAR_standard_application_software_identification_ReadData', func_type=False), CodeComment(comment='/*! \\misra PRQA 3432 "Macro expansion does not result in expression\nand according to the Coding Guideline rule 4.6 AUTOSAR Compiler Abstraction should be used" */', start_line_num=1756, end_line_num=1757, type_='', function=None, func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=1759, end_line_num=1759, type_='', function=None, func_type=False), CodeComment(comment='/* copy data into the result buffer */\n/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=1764, end_line_num=1766, type_='', function='Idp_F1B6_System_identification_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=1767, end_line_num=1767, type_='', function='Idp_F1B6_System_identification_ReadData', func_type=False), CodeComment(comment='/*! \\misra PRQA 3432 "Macro expansion does not result in expression\nand according to the Coding Guideline rule 4.6 AUTOSAR Compiler Abstraction should be used" */', start_line_num=1790, end_line_num=1791, type_='', function=None, func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=1793, end_line_num=1793, type_='', function=None, func_type=False), CodeComment(comment='/* copy data into the result buffer */\n/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=1798, end_line_num=1800, type_='', function='Idp_x0102_BasicSettingsStatus_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=1801, end_line_num=1801, type_='', function='Idp_x0102_BasicSettingsStatus_ReadData', func_type=False), CodeComment(comment='/*! \\misra PRQA 3432 "Macro expansion does not result in expression\nand according to the Coding Guideline rule 4.6 AUTOSAR Compiler Abstraction should be used" */', start_line_num=1824, end_line_num=1825, type_='', function=None, func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=1827, end_line_num=1827, type_='', function=None, func_type=False), CodeComment(comment='/* copy data into the result buffer */\n/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=1836, end_line_num=1838, type_='', function='Idp_x0261_OBD_Driving_Cycle_set_once_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=1839, end_line_num=1839, type_='', function='Idp_x0261_OBD_Driving_Cycle_set_once_ReadData', func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=1862, end_line_num=1862, type_='', function=None, func_type=False), CodeComment(comment='/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=1870, end_line_num=1871, type_='', function='Idp_x02CA_Knockout_counter_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=1872, end_line_num=1872, type_='', function='Idp_x02CA_Knockout_counter_ReadData', func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=1895, end_line_num=1895, type_='', function=None, func_type=False), CodeComment(comment='/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=1903, end_line_num=1904, type_='', function='Idp_x02CA_Knockout_counter_WriteData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=1905, end_line_num=1905, type_='', function='Idp_x02CA_Knockout_counter_WriteData', func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=1951, end_line_num=1951, type_='', function=None, func_type=False), CodeComment(comment='/* NVEM shall not be used according to [KO_911] */', start_line_num=1959, end_line_num=1959, type_='', function='Idp_x02CB_Knockout_timer_ReadData', func_type=False), CodeComment(comment='/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=1961, end_line_num=1962, type_='', function='Idp_x02CB_Knockout_timer_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=1963, end_line_num=1963, type_='', function='Idp_x02CB_Knockout_timer_ReadData', func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=1986, end_line_num=1986, type_='', function=None, func_type=False), CodeComment(comment='/*! \\misra PRQA 2981: variable initialization recommended by Coding Guideline Rule 4.14 */', start_line_num=1990, end_line_num=1990, type_='', function='Idp_x02CB_Knockout_timer_WriteData', func_type=False), CodeComment(comment='/* PRQA S 2981 */\n/*! \\misra PRQA 2981: variable initialization recommended by Coding Guideline Rule 4.14 */', start_line_num=1991, end_line_num=1992, type_='', function='Idp_x02CB_Knockout_timer_WriteData', func_type=False), CodeComment(comment='/* PRQA S 2981 */\n/*! \\misra PRQA 2981: variable initialization recommended by Coding Guideline Rule 4.14 */', start_line_num=1993, end_line_num=1994, type_='', function='Idp_x02CB_Knockout_timer_WriteData', func_type=False), CodeComment(comment='/* PRQA S 2981 */', start_line_num=1995, end_line_num=1995, type_='', function='Idp_x02CB_Knockout_timer_WriteData', func_type=False), CodeComment(comment='/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=1999, end_line_num=2000, type_='', function='Idp_x02CB_Knockout_timer_WriteData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=2001, end_line_num=2001, type_='', function='Idp_x02CB_Knockout_timer_WriteData', func_type=False), CodeComment(comment='/* Timer set up shall be rejected if they are out of range */', start_line_num=2007, end_line_num=2007, type_='', function='Idp_x02CB_Knockout_timer_WriteData', func_type=False), CodeComment(comment='/* NVEM shall be rejected if !0 is written [KO_915] */', start_line_num=2010, end_line_num=2010, type_='', function='Idp_x02CB_Knockout_timer_WriteData', func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=2050, end_line_num=2050, type_='', function=None, func_type=False), CodeComment(comment='/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=2054, end_line_num=2055, type_='', function='Idp_x09F3_KnockOut_test_mode_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=2056, end_line_num=2056, type_='', function='Idp_x09F3_KnockOut_test_mode_ReadData', func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=2079, end_line_num=2079, type_='', function=None, func_type=False), CodeComment(comment='/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n         source and destination are the same type" */', start_line_num=2087, end_line_num=2088, type_='', function='Idp_x09F3_KnockOut_test_mode_WriteData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=2089, end_line_num=2089, type_='', function='Idp_x09F3_KnockOut_test_mode_WriteData', func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=2119, end_line_num=2119, type_='', function=None, func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=2140, end_line_num=2140, type_='', function=None, func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=2166, end_line_num=2166, type_='', function=None, func_type=False), CodeComment(comment='/* Only Byte2 contains functions, which are affected by production mode. */', start_line_num=2176, end_line_num=2176, type_='', function='Idp_x019C_Status_productionmode_ReadData', func_type=False), CodeComment(comment='/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=2186, end_line_num=2187, type_='', function='Idp_x019C_Status_productionmode_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=2188, end_line_num=2188, type_='', function='Idp_x019C_Status_productionmode_ReadData', func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=2210, end_line_num=2210, type_='', function=None, func_type=False), CodeComment(comment='/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=2219, end_line_num=2220, type_='', function='Idp_x04FC_Productionmode_deactivate_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=2221, end_line_num=2221, type_='', function='Idp_x04FC_Productionmode_deactivate_ReadData', func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=2245, end_line_num=2245, type_='', function=None, func_type=False), CodeComment(comment='/* Process the incoming Data. Only 0x000000 is acceptable. */\n/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=2255, end_line_num=2257, type_='', function='Idp_x04FC_Productionmode_deactivate_WritedData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=2258, end_line_num=2258, type_='', function='Idp_x04FC_Productionmode_deactivate_WritedData', func_type=False), CodeComment(comment='/* Reset the configuration */\n/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n         source and destination are the same type" */', start_line_num=2269, end_line_num=2271, type_='', function='Idp_x04FC_Productionmode_deactivate_WritedData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=2272, end_line_num=2272, type_='', function='Idp_x04FC_Productionmode_deactivate_WritedData', func_type=False), CodeComment(comment='/* Store the new Data in the NvM immediately */', start_line_num=2274, end_line_num=2274, type_='', function='Idp_x04FC_Productionmode_deactivate_WritedData', func_type=False), CodeComment(comment="/* set NRC 'REQUEST_OUT_OF_RANGE' */", start_line_num=2280, end_line_num=2280, type_='', function='Idp_x04FC_Productionmode_deactivate_WritedData', func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=2309, end_line_num=2309, type_='', function=None, func_type=False), CodeComment(comment='/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=2315, end_line_num=2316, type_='', function='Idp_x04FE_Productionmode_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=2317, end_line_num=2317, type_='', function='Idp_x04FE_Productionmode_ReadData', func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=2341, end_line_num=2341, type_='', function=None, func_type=False), CodeComment(comment='/* Store the new function configuration */\n/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n         source and destination are the same type" */', start_line_num=2353, end_line_num=2355, type_='', function='Idp_x04FE_Productionmode_WriteData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=2356, end_line_num=2356, type_='', function='Idp_x04FE_Productionmode_WriteData', func_type=False), CodeComment(comment='/* Store in the NvM immediately */', start_line_num=2358, end_line_num=2358, type_='', function='Idp_x04FE_Productionmode_WriteData', func_type=False), CodeComment(comment='/* [A: Q-LAH_PMode-21] */', start_line_num=2364, end_line_num=2364, type_='', function='Idp_x04FE_Productionmode_WriteData', func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=2396, end_line_num=2396, type_='', function=None, func_type=False), CodeComment(comment='/* PRQA S 3206 */', start_line_num=2396, end_line_num=2396, type_='', function=None, func_type=False), CodeComment(comment='/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=2402, end_line_num=2403, type_='', function='Idp_x0410_BootloaderTPBlocksize_WriteData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=2404, end_line_num=2404, type_='', function='Idp_x0410_BootloaderTPBlocksize_WriteData', func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=2431, end_line_num=2431, type_='', function=None, func_type=False), CodeComment(comment='/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n     source and destination are the same type" */', start_line_num=2436, end_line_num=2437, type_='', function='Idp_x02B3_Response_On_Event_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=2438, end_line_num=2438, type_='', function='Idp_x02B3_Response_On_Event_ReadData', func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=2462, end_line_num=2462, type_='', function=None, func_type=False), CodeComment(comment='/*! \\misra PRQA 2981: variable initialization recommended by Coding Guideline Rule 4.14 */', start_line_num=2465, end_line_num=2465, type_='', function='Idp_F1A1_VWDataSetVersionNumber_WriteData', func_type=False), CodeComment(comment='/* PRQA S 2981 */', start_line_num=2466, end_line_num=2466, type_='', function='Idp_F1A1_VWDataSetVersionNumber_WriteData', func_type=False), CodeComment(comment='/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n     source and destination are the same type" */', start_line_num=2472, end_line_num=2473, type_='', function='Idp_F1A1_VWDataSetVersionNumber_WriteData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=2474, end_line_num=2474, type_='', function='Idp_F1A1_VWDataSetVersionNumber_WriteData', func_type=False), CodeComment(comment='/* Range check */', start_line_num=2475, end_line_num=2475, type_='', function='Idp_F1A1_VWDataSetVersionNumber_WriteData', func_type=False), CodeComment(comment='/* Range check */', start_line_num=2482, end_line_num=2482, type_='', function='Idp_F1A1_VWDataSetVersionNumber_WriteData', func_type=False), CodeComment(comment='/* If the range are correct */', start_line_num=2491, end_line_num=2491, type_='', function='Idp_F1A1_VWDataSetVersionNumber_WriteData', func_type=False), CodeComment(comment='/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n        source and destination are the same type" */', start_line_num=2493, end_line_num=2494, type_='', function='Idp_F1A1_VWDataSetVersionNumber_WriteData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=2495, end_line_num=2495, type_='', function='Idp_F1A1_VWDataSetVersionNumber_WriteData', func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=2524, end_line_num=2524, type_='', function=None, func_type=False), CodeComment(comment='/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n     source and destination are the same type" */', start_line_num=2529, end_line_num=2530, type_='', function='Idp_F1A1_VWDataSetVersionNumber_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=2531, end_line_num=2531, type_='', function='Idp_F1A1_VWDataSetVersionNumber_ReadData', func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=2553, end_line_num=2553, type_='', function=None, func_type=False), CodeComment(comment='/* copy data into the result buffer */\n/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=2558, end_line_num=2560, type_='', function='Idp_F182_VWApplicationDataIdentification_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=2561, end_line_num=2561, type_='', function='Idp_F182_VWApplicationDataIdentification_ReadData', func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=2585, end_line_num=2585, type_='', function=None, func_type=False), CodeComment(comment='/*! \\misra PRQA 0310, 3305 "The casting works and intended for the good behavior." */', start_line_num=2587, end_line_num=2587, type_='', function='Idp_F1F4_Bootloader_identification', func_type=False), CodeComment(comment='/* PRQA S 0310,3305*/', start_line_num=2588, end_line_num=2588, type_='', function='Idp_F1F4_Bootloader_identification', func_type=False), CodeComment(comment='/* Bootloader identification ID added in hex for ascii */', start_line_num=2590, end_line_num=2590, type_='', function='Idp_F1F4_Bootloader_identification', func_type=False), CodeComment(comment='/*PWRVS CB.0000---- ---.00 ----*/', start_line_num=2594, end_line_num=2594, type_='', function='Idp_F1F4_Bootloader_identification', func_type=False), CodeComment(comment='/* QAC: After the cast operator the "chkprg_is_valid_rom_addr" function checks that\n   it is pointing to valid memory space. */', start_line_num=2597, end_line_num=2598, type_='', function='Idp_F1F4_Bootloader_identification', func_type=False), CodeComment(comment='/* copy F1F4 data from Info Table, which includes FLASH_CONFIG_SY */\n/* F1F4 format: DID_data[20:18] = FLASH_CONFIG_SY */', start_line_num=2602, end_line_num=2603, type_='', function='Idp_F1F4_Bootloader_identification', func_type=False), CodeComment(comment='/* copy bootloader version number from NvM */\n/* F1F4 format: DID_data[16:13] = bootloader version number */\n/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=2606, end_line_num=2609, type_='', function='Idp_F1F4_Bootloader_identification', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=2610, end_line_num=2610, type_='', function='Idp_F1F4_Bootloader_identification', func_type=False), CodeComment(comment='/* detect hardware version */', start_line_num=2615, end_line_num=2615, type_='', function='Idp_F1F4_Bootloader_identification', func_type=False), CodeComment(comment="/*'B'*/", start_line_num=2619, end_line_num=2619, type_='', function='Idp_F1F4_Bootloader_identification', func_type=False), CodeComment(comment="/*'P'*/", start_line_num=2620, end_line_num=2620, type_='', function='Idp_F1F4_Bootloader_identification', func_type=False), CodeComment(comment="/*'C'*/", start_line_num=2621, end_line_num=2621, type_='', function='Idp_F1F4_Bootloader_identification', func_type=False), CodeComment(comment="/*'3'*/", start_line_num=2622, end_line_num=2622, type_='', function='Idp_F1F4_Bootloader_identification', func_type=False), CodeComment(comment="/*'B'*/", start_line_num=2626, end_line_num=2626, type_='', function='Idp_F1F4_Bootloader_identification', func_type=False), CodeComment(comment="/*'M'*/", start_line_num=2627, end_line_num=2627, type_='', function='Idp_F1F4_Bootloader_identification', func_type=False), CodeComment(comment="/*'C'*/", start_line_num=2628, end_line_num=2628, type_='', function='Idp_F1F4_Bootloader_identification', func_type=False), CodeComment(comment="/*'2'*/", start_line_num=2629, end_line_num=2629, type_='', function='Idp_F1F4_Bootloader_identification', func_type=False), CodeComment(comment="/*'-'*/", start_line_num=2633, end_line_num=2633, type_='', function='Idp_F1F4_Bootloader_identification', func_type=False), CodeComment(comment="/*'-'*/", start_line_num=2634, end_line_num=2634, type_='', function='Idp_F1F4_Bootloader_identification', func_type=False), CodeComment(comment="/*'-'*/", start_line_num=2635, end_line_num=2635, type_='', function='Idp_F1F4_Bootloader_identification', func_type=False), CodeComment(comment="/*'-'*/", start_line_num=2636, end_line_num=2636, type_='', function='Idp_F1F4_Bootloader_identification', func_type=False), CodeComment(comment='/* copy hardware version */\n/* F1F4 format: DID_data[28:25] = hardware version */\n/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=2640, end_line_num=2643, type_='', function='Idp_F1F4_Bootloader_identification', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=2644, end_line_num=2644, type_='', function='Idp_F1F4_Bootloader_identification', func_type=False), CodeComment(comment='/* copy data into the result buffer */\n/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=2646, end_line_num=2648, type_='', function='Idp_F1F4_Bootloader_identification', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=2649, end_line_num=2649, type_='', function='Idp_F1F4_Bootloader_identification', func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=2670, end_line_num=2670, type_='', function=None, func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=2671, end_line_num=2671, type_='', function=None, func_type=False), CodeComment(comment='/* DownGradeProtection incl. */', start_line_num=2673, end_line_num=2673, type_='', function='Idp_ProvideProgAttemps', func_type=False), CodeComment(comment='/*! \\misra PRQA 2981: variable initialization recommended by Coding Guideline Rule 4.14 */', start_line_num=2676, end_line_num=2676, type_='', function='Idp_ProvideProgAttemps', func_type=False), CodeComment(comment='/* PRQA S 2981 */', start_line_num=2677, end_line_num=2677, type_='', function='Idp_ProvideProgAttemps', func_type=False), CodeComment(comment='/* copy data into the result buffer */\n/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=2687, end_line_num=2689, type_='', function='Idp_ProvideProgAttemps', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=2690, end_line_num=2690, type_='', function='Idp_ProvideProgAttemps', func_type=False), CodeComment(comment='/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=2694, end_line_num=2695, type_='', function='Idp_ProvideProgAttemps', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=2696, end_line_num=2696, type_='', function='Idp_ProvideProgAttemps', func_type=False), CodeComment(comment='/*PRQA S 3432*/', start_line_num=2721, end_line_num=2721, type_='', function=None, func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=2766, end_line_num=2766, type_='', function=None, func_type=False), CodeComment(comment='/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=2771, end_line_num=2772, type_='', function='FD00_VsEA_HardwareIdentification_CU_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=2773, end_line_num=2773, type_='', function='FD00_VsEA_HardwareIdentification_CU_ReadData', func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=2795, end_line_num=2795, type_='', function=None, func_type=False), CodeComment(comment='/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=2800, end_line_num=2801, type_='', function='FD01_VsEA_HardwareIdentification_PU_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=2802, end_line_num=2802, type_='', function='FD01_VsEA_HardwareIdentification_PU_ReadData', func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=2824, end_line_num=2824, type_='', function=None, func_type=False), CodeComment(comment='/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=2829, end_line_num=2830, type_='', function='FD02_VsEA_HardwareIdentification_FilterBoard_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=2831, end_line_num=2831, type_='', function='FD02_VsEA_HardwareIdentification_FilterBoard_ReadData', func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=2856, end_line_num=2856, type_='', function=None, func_type=False), CodeComment(comment='/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=2861, end_line_num=2862, type_='', function='FD03_VsEA_HardwareIdentification_IGBT_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=2863, end_line_num=2863, type_='', function='FD03_VsEA_HardwareIdentification_IGBT_ReadData', func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=2885, end_line_num=2885, type_='', function=None, func_type=False), CodeComment(comment='/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=2890, end_line_num=2891, type_='', function='FD04_VsEA_HardwareIdentification_InvCover_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=2892, end_line_num=2892, type_='', function='FD04_VsEA_HardwareIdentification_InvCover_ReadData', func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=2917, end_line_num=2917, type_='', function=None, func_type=False), CodeComment(comment='/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=2923, end_line_num=2924, type_='', function='FEFF_VsEA_MicrocontrollerId_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=2925, end_line_num=2925, type_='', function='FEFF_VsEA_MicrocontrollerId_ReadData', func_type=False), CodeComment(comment='/* CPU uses 32-bit architecture and little-endian byte ordering so byte swap every 32 bit chunk.\n       * Assuming AURIX ID takes integer number of words. */', start_line_num=2929, end_line_num=2930, type_='', function='FEFF_VsEA_MicrocontrollerId_ReadData', func_type=False), CodeComment(comment='/*! \\misra PRQA 0492 "The array operand is needed for the correct data handling" */\n/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n         source and destination are the same type" */', start_line_num=2933, end_line_num=2935, type_='', function='FEFF_VsEA_MicrocontrollerId_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0492 */', start_line_num=2936, end_line_num=2936, type_='', function='FEFF_VsEA_MicrocontrollerId_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=2936, end_line_num=2936, type_='', function='FEFF_VsEA_MicrocontrollerId_ReadData', func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=2959, end_line_num=2959, type_='', function=None, func_type=False), CodeComment(comment='/* copy data into the result buffer */\n/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=2963, end_line_num=2965, type_='', function='Idp_x0903_Expected_model_type_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=2966, end_line_num=2966, type_='', function='Idp_x0903_Expected_model_type_ReadData', func_type=False), CodeComment(comment='/* PRQA S 3432 */', start_line_num=2990, end_line_num=2990, type_='', function=None, func_type=False), CodeComment(comment='/* PRQA S 3206 */', start_line_num=2990, end_line_num=2990, type_='', function=None, func_type=False), CodeComment(comment='/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=2995, end_line_num=2996, type_='', function='Idp_x0903_Expected_model_type_WriteData', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=2997, end_line_num=2997, type_='', function='Idp_x0903_Expected_model_type_WriteData', func_type=False), CodeComment(comment='/* Wait for the NvM to write the block */', start_line_num=3001, end_line_num=3001, type_='', function='Idp_x0903_Expected_model_type_WriteData', func_type=False), CodeComment(comment='/*! \\misra PRQA 3432 "Macro expansion does not result in expression\nand according to the Coding Guideline rule 4.6 AUTOSAR Compiler Abstraction should be used" */', start_line_num=3023, end_line_num=3024, type_='', function=None, func_type=False), CodeComment(comment='/*PRQA S 3432*/', start_line_num=3026, end_line_num=3026, type_='', function=None, func_type=False), CodeComment(comment='/* array subscripting can be applied here, As per AutoSAR config, Data points to an array */\n/* PRQA S 0492 ++ */', start_line_num=3030, end_line_num=3031, type_='', function='Idp_x0448_ProgPrecond_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0492 -- */', start_line_num=3042, end_line_num=3042, type_='', function='Idp_x0448_ProgPrecond_ReadData', func_type=False), CodeComment(comment='/* FUNC(Std_ReturnType, RTE_CODE) Idp_x0448_ProgPrecond_ReadData (P2VAR(uint8, AUTOMATIC, RTE_APPL_DATA) Data) */', start_line_num=3045, end_line_num=3045, type_='', function='Idp_x0448_ProgPrecond_ReadData', func_type=False), CodeComment(comment='/*PRQA S 3432*/', start_line_num=3059, end_line_num=3059, type_='', function=None, func_type=False), CodeComment(comment='/*! \\misra PRQA 0492 "Array subscripting can be applied here, as per AutoSAR config, Data points to an array." */', start_line_num=3063, end_line_num=3063, type_='', function='Idp_x02CF_OBD_class_description_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0492 */\n/*! \\misra PRQA 0492 "Array subscripting can be applied here, as per AutoSAR config, Data points to an array." */', start_line_num=3064, end_line_num=3065, type_='', function='Idp_x02CF_OBD_class_description_ReadData', func_type=False), CodeComment(comment='/* PRQA S 0492 */', start_line_num=3066, end_line_num=3066, type_='', function='Idp_x02CF_OBD_class_description_ReadData', func_type=False), CodeComment(comment='/*VW coding value is stored in NVM and must be read and forwarded before the VW component is initialized.*/\n/*In the 0x0903_Expected_model_type DID, the 0-3 bits contain the value that should be forwareded to the\n    *                                                                                 VW component(bytes are swapped)*/', start_line_num=3083, end_line_num=3085, type_='', function='Idp_InitializeAdaptionValue', func_type=False), CodeComment(comment='/* update ram block */\n/*! \\misra PRQA 0492 "The array operand is needed for the correct data handling" */', start_line_num=3107, end_line_num=3108, type_='', function='Idp_SetBLKmDate', func_type=False), CodeComment(comment='/* PRQA S 0492 */\n/*! \\misra PRQA 0492 "The array operand is needed for the correct data handling" */', start_line_num=3109, end_line_num=3110, type_='', function='Idp_SetBLKmDate', func_type=False), CodeComment(comment='/* PRQA S 0492 */\n/*! \\misra PRQA 0315  "Implicit conversion unavoidable with memcpy function,\n      source and destination are the same type" */', start_line_num=3111, end_line_num=3113, type_='', function='Idp_SetBLKmDate', func_type=False), CodeComment(comment='/* PRQA S 0315 */', start_line_num=3114, end_line_num=3114, type_='', function='Idp_SetBLKmDate', func_type=False), CodeComment(comment='/*! \\misra PRQA 4800 "This define automatically generated" */', start_line_num=3120, end_line_num=3120, type_='', function=None, func_type=False), CodeComment(comment='/* PRQA S 4800 */', start_line_num=3121, end_line_num=3121, type_='', function=None, func_type=False)]